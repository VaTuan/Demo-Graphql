{"version":3,"sources":["components/LaunchItem.tsx","components/MissionKey.tsx","components/Launches.tsx","components/Launch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LaunchItem","launch","console","log","flight_number","mission_name","launch_date_local","launch_year","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","message","launches","map","index","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc54fc27.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport { Launch } from '../types/launch';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\n\r\n\r\ninterface LaunchItemProps {\r\n    launch: Launch\r\n}\r\n\r\nconst LaunchItem: FunctionComponent<LaunchItemProps> = ({ launch }) => {\r\n    console.log('launch : ', { launch });\r\n    let { flight_number, mission_name, launch_year, launch_date_local, launch_success } = launch\r\n\r\n\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission : <span className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                    })}>{mission_name}</span></h4>\r\n                    <p>Date : <Moment format='DD/MM/YYYY HH:mm'>{launch_date_local}</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className='btn btn-primary'>Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LaunchItem\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className='my-3'>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import { useQuery, gql } from '@apollo/client'\r\nimport React, { Fragment, FunctionComponent } from 'react'\r\nimport { Launch } from '../types/launch';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\nquery LaunchesQuery {\r\n    launches(limit : 6){\r\n        mission_name\r\n        flight_number\r\n        launch_year\r\n        launch_date_local\r\n        launch_success\r\n      }\r\n  }\r\n`\r\n\r\nconst Launches: FunctionComponent = () => {\r\n\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n    if (error) return (<div className=\"alert alert-dismissible alert-danger col-3\">\r\n        {error.message}\r\n    </div>)\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"launches\">\r\n                <h2>Launches</h2>\r\n                <MissionKey />\r\n                {\r\n                    loading ? (\r\n                        <div className=\"alert alert-dismissible alert-primary col-3 mr-auto\">\r\n                            Loading...\r\n                        </div>) :\r\n                        <>\r\n\r\n                            <div className='launches'>\r\n                                {\r\n                                    data.launches.map((launch: Launch, index: number) => (\r\n                                        <LaunchItem key={index} launch={launch} />\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </>\r\n                }\r\n            </div>\r\n        </Fragment >\r\n    )\r\n}\r\nexport default Launches\r\n","import React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport classNames from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\nconst LAUNCH_QUERY = gql`\r\nquery LaunchQuery($flight_number :Int!){\r\n    launch (flight_number : $flight_number){\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket{\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default function Launch(props) {\r\n    // console.log('props of Launch :', { props });\r\n    // console.log(parseInt(props.match.params.flight_number));\r\n    let { flight_number } = props.match.params;\r\n    flight_number = parseInt(flight_number)\r\n\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n        variables: { flight_number }\r\n    });\r\n\r\n    if (loading) return (\r\n        <div className=\"alert alert-dismissible alert-primary col-3 mr-auto\">\r\n            Loading...\r\n        </div>\r\n    )\r\n    if (error) return (<span className=\"badge badge-pill badge-danger px-5 py-2 col-3\">{error.message}</span>)\r\n\r\n    let { mission_name, launch_year, launch_date_local, launch_success, rocket } = data.launch\r\n    const { rocket_id, rocket_name, rocket_type } = rocket\r\n\r\n\r\n    return (\r\n        <div className='launch'>\r\n            <h3 className='display-4 my-3'>\r\n                <span className=\"text-primary\">Mission :</span>{mission_name}\r\n            </h3>\r\n            <h4 className=\"mb-3\">Launch Details</h4>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Fight Number: {flight_number}</li>\r\n            </ul>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n            </ul>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Launch Successful: <span className={classNames({\r\n                    'text-danger': !launch_success,\r\n                    'text-success': launch_success,\r\n                    ' font-weight-bold': true\r\n                })}>{launch_success ? 'Yes' : 'No'}</span></li>\r\n            </ul>\r\n\r\n            <h3 className=\"mb-3\">Rocket Details</h3>\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">\r\n                    Rocket ID : {rocket_id}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Rocket Name : {rocket_name}\r\n                </li>\r\n                <li className=\"list-group-item\">\r\n                    Rocket Type : {rocket_type}\r\n                </li>\r\n            </ul>\r\n            <hr />\r\n            <Link to='/' className='btn btn-secondary' >Back</Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, gql, useQuery } from '@apollo/client'\nimport './App.css';\nimport Launches from './components/Launches';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:5555/graphql',\n    cache: new InMemoryCache()\n})\n\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div className='app container'>\n                    <h1>SpaceX</h1>\n                    <Route exact path='/' component={Launches} />\n                    <Route path='/launch/:flight_number' component={Launch} />\n                </div>\n            </Router>\n        </ApolloProvider>\n    )\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './styles/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}